type token =
  | INT of (int)
  | ADD
  | SUB
  | MUL
  | DIV
  | BOOL of (bool)
  | LT
  | EQ
  | IF
  | THEN
  | ELSE
  | ID of (string)
  | LET
  | REC
  | IN
  | FUN
  | ARROW
  | LBRACKET
  | RBRACKET
  | MATCH
  | WITH
  | CONS
  | LPAR
  | RPAR
  | SEMI
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "week1_Parser.mly"
  open Week1_syntax
  (* ここに書いたものは，ExampleParser.mliに入らないので注意 *)

  (* 目的：変数列と本体の式から、入れ子になった１引数関数を作る *)
  (* create_fun : string list -> Syntax.t -> Syntax.t *)
  (*let create_fun variables expr =
    List.fold_right (fun var expr -> EFun (var, expr)) variables expr

  (* 目的：式の列から、Cons を使ったリストを作る *)
  (* create_list : Syntax.t list -> Syntax.t *)
  let create_list exprs =
    List.fold_right (fun expr lst -> Cons (expr, lst)) exprs Nil*)
# 45 "week1_Parser.ml"
let yytransl_const = [|
  258 (* ADD *);
  259 (* SUB *);
  260 (* MUL *);
  261 (* DIV *);
  263 (* LT *);
  264 (* EQ *);
  265 (* IF *);
  266 (* THEN *);
  267 (* ELSE *);
  269 (* LET *);
  270 (* REC *);
  271 (* IN *);
  272 (* FUN *);
  273 (* ARROW *);
  274 (* LBRACKET *);
  275 (* RBRACKET *);
  276 (* MATCH *);
  277 (* WITH *);
  278 (* CONS *);
  279 (* LPAR *);
  280 (* RPAR *);
  281 (* SEMI *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  262 (* BOOL *);
  268 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\001\000\006\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\012\000\013\000\000\000\000\000\015\000\000\000\
\002\000\000\000\011\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\007\000\008\000\000\000\000\000\000\000\000\000\003\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\011\000"

let yysindex = "\255\255\
\003\255\000\000\000\000\000\000\003\255\003\255\000\000\008\000\
\000\000\017\255\000\000\004\255\249\254\000\000\009\255\009\255\
\009\255\009\255\009\255\009\255\003\255\000\000\002\255\002\255\
\000\000\000\000\026\255\026\255\012\255\003\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\011\000\
\000\000\000\000\013\000\016\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\253\255\018\000\000\000"

let yytablesize = 296
let yytable = "\001\000\
\005\000\012\000\013\000\003\000\004\000\017\000\018\000\014\000\
\004\000\003\000\006\000\005\000\010\000\021\000\004\000\009\000\
\022\000\029\000\015\000\016\000\017\000\018\000\030\000\019\000\
\020\000\006\000\031\000\015\000\016\000\017\000\018\000\006\000\
\023\000\024\000\025\000\026\000\027\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\005\000\000\000\000\000\000\000\005\000\
\005\000\000\000\005\000\005\000\006\000\006\000\004\000\004\000\
\000\000\006\000\006\000\000\000\006\000\006\000\010\000\010\000\
\005\000\009\000\009\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\010\000\000\000\000\000\009\000"

let yycheck = "\001\000\
\000\000\005\000\006\000\001\001\000\000\004\001\005\001\000\000\
\006\001\001\001\000\000\009\001\000\000\010\001\006\001\000\000\
\024\001\021\000\002\001\003\001\004\001\005\001\011\001\007\001\
\008\001\023\001\030\000\002\001\003\001\004\001\005\001\023\001\
\015\000\016\000\017\000\018\000\019\000\020\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\010\001\011\001\002\001\003\001\010\001\011\001\
\255\255\007\001\008\001\255\255\010\001\011\001\010\001\011\001\
\024\001\010\001\011\001\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\024\001\255\255\255\255\024\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  LT\000\
  EQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  REC\000\
  IN\000\
  FUN\000\
  ARROW\000\
  LBRACKET\000\
  RBRACKET\000\
  MATCH\000\
  WITH\000\
  CONS\000\
  LPAR\000\
  RPAR\000\
  SEMI\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'command) in
    Obj.repr(
# 47 "week1_Parser.mly"
            (_1)
# 228 "week1_Parser.ml"
               : Week1_syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "week1_Parser.mly"
                         ( _1 )
# 235 "week1_Parser.ml"
               : 'command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "week1_Parser.mly"
                                               ( EIf(_2,_4,_6) )
# 244 "week1_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 62 "week1_Parser.mly"
                                               ( _1 )
# 251 "week1_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 68 "week1_Parser.mly"
                              ( EBin(OpAdd,_1,_3) )
# 259 "week1_Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 69 "week1_Parser.mly"
                              ( EBin(OpSub,_1,_3) )
# 267 "week1_Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 70 "week1_Parser.mly"
                              ( EBin(OpMul,_1,_3) )
# 275 "week1_Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 71 "week1_Parser.mly"
                              ( EBin(OpDiv,_1,_3) )
# 283 "week1_Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 72 "week1_Parser.mly"
                              ( EBin(OpEQ,_1,_3) )
# 291 "week1_Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 73 "week1_Parser.mly"
                              ( EBin(OpLT,_1,_3) )
# 299 "week1_Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 74 "week1_Parser.mly"
                              ( _1 )
# 306 "week1_Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 78 "week1_Parser.mly"
                                     ( EValue(VInt _1) )
# 313 "week1_Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 79 "week1_Parser.mly"
                                     ( EValue(VBool _1) )
# 320 "week1_Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 81 "week1_Parser.mly"
                                     ( _2 )
# 327 "week1_Parser.ml"
               : 'factor_expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Week1_syntax.expr)
